import argparse


class ListNode:
    
    def __init__(self, val=None, nex=None):
        self.val = None
        if val:
            self.val = val
        self.nex = None
        if nex:
            self.nex = nex
   

class List:
    
    def __init__(self, values=None):
        self.base = ListNode()
        if values:
            cur = self.base
            for value in values:
                cur.nex = ListNode(val=value)
                cur = cur.nex
    
    def pop_next(self, cur) -> ListNode:
        if cur.nex:
            cur_nex = cur.nex
            cur.nex = cur_nex.nex
            return cur_nex
    
    def not_empty(self):
        return self.base.nex
    
    def __str__(self):
        cur = self.base
        while cur.nex:
            print(cur.nex.val, end=', ')
            cur = cur.nex
        return ''
        

def dist2(p1, p2) -> float:
    x_diff = p1[0] - p2[0]
    y_diff = p1[1] - p2[1]
    return x_diff * x_diff + y_diff * y_diff
    
    
def main(fname):
    cities = []
    with open(fname) as f:
        cities_num = int(f.readline())
        while line := f.readline():
            cities.append(list(map(float, line.split()))[1:])
            
    cur_city = ListNode(cities[0])
    total_dist = 0
    
    lst = List(cities[1:])
    dropped = None
    for i in range(cities_num - 1, 0, -1):
        if i % 1000 == 0: print(i)
        pre_min_city = lst.base
        min_dist = float('inf')
        iterator = lst.base
        for _ in range(i):
            cur_dist = dist2(cur_city.val, iterator.nex.val)
            if cur_dist < min_dist:
                min_dist = cur_dist
                pre_min_city = iterator
            iterator = iterator.nex
        total_dist += min_dist ** 0.5
        cur_city = lst.pop_next(pre_min_city)

    return total_dist + dist2(cities[0], cur_city.val) ** 0.5
    
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--fname', type=str, help="file with cities locations")
    args = parser.parse_args()
    print(main(args.fname))