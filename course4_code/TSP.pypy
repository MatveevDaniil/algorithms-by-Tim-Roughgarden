class Graph:
    def __init__(self, fname=None, dist_precalc=True):
        self.n = 0
        self.P = []
        self.dist_precalculated = False
        if fname:
            self.read_file(fname)
            if dist_precalc:
                self.dist_precalc()
    
    def calc_dist_2(self, i, j):
        x1_x2 = self.P[i][0] - self.P[j][0]
        y1_y2 = self.P[i][1] - self.P[j][1]
        return x1_x2 * x1_x2 + y1_y2 * y1_y2
    
    def calc_dist(self, i, j):
        return self.calc_dist_2(i, j) ** 0.5
    
    def dist_precalc(self):
        self.dist_precalculated = True
        self.dist = [[0] * self.n for _ in range(self.n)]
        for i in range(self.n):
            for j in range(self.n):
                self.dist[i][j] = self.calc_dist(i, j)
    
    def read_file(self, fname):
        with open(fname) as f:
            self.n = int(f.readline()[:-1])
            line = f.readline()
            while line:
                self.P.append(tuple(map(float, line.split())))
                line = f.readline()
            assert len(self.P) == self.n
   
    def tsp_rec(self):
        self.A = [[float('inf')] + [None] * (self.n - 1) for _ in range(1 << self.n)]
        self.A[1 << (self.n - 1)][0] = 0
        def rec_calc(S, j):
            _S = list(bin(S)[2:])
            _S = ['0'] * (self.n - len(_S)) + _S
            if self.A[S][j] is not None: return self.A[S][j]
            _S[j] = '0'
            S_j = int(''.join(_S), 2)
            self.A[S][j] = float('inf')
            for k in range(self.n):
                if _S[k] == '1':
                    self.A[S][j] = min(self.A[S][j], rec_calc(S_j, k) + self.dist[k][j])
            return self.A[S][j]
        self.min_tsp = float('inf')
        S = int('1' * self.n, 2)
        for j in range(1, self.n):
            self.min_tsp = min(self.min_tsp, rec_calc(S, j) + self.dist[j][0])
            print('all paths frough %d calculated' % j)
        return self.min_tsp
            
            
def main(fname='./tests/tsp.txt'):           
    g = Graph(fname=fname)
    print('Graph initialized')
    print('Start solving TSP')
    return g.tsp_rec()
    

if __name__ == "__main__":
    print(main())